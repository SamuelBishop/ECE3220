There is no reason to do this (if you don't use the variable frequently):
	int n{5}; // instantiates the var n to 5
	
Because you can do this:
	int{5}; // creates an anonymous int without a name that holds data 5

This concept is similar to the throw command:
	throw runtime_error("Invalid number of command line args."); // Throws data from an anonymous string

- Sidenote: Flushing doesn't matter on cerr stream because it has no output

String Stream Objects: 
istreamstrings -> Can only use the extraction operator >>
ostreamstrings -> Can only use the insertion operator <<
iostreamstrings -> Can use both operators

Subtle difference between c and c++: % = type specifier manipulator
	%0.2d -> 0 padding and 2 digets for a double in c++
	// this probably functions the same as c


stream error method processing: (IO library in base class)
	Three different key bit flags:
	1. eofbit
	2. failbit
	3. badbit	(buffer related problems)

	(4. Goodbit, all other bits are not on.)

	State flag functions:
	(if all three flags are false)	good -> checks if the state of the stream is good
	(if eof bit is true)		eof -> checks if the eof bit is set
	(if failbit is true)		fail -> checks whether the failbit or badbit is set
	(if badbit is true)		bad -> checks whether the badbit is set

	NOTE: After any of these flags are asserted, stream basically becomes unusable.
	EX: cin >> n FAILS so cin >> m; WILL FAIL

- Unary operators: (single components or element)
	+, -, !, ~, ++, --, ()
- Binary operators: (two components or elements)
	+, -, /, *, %, >>, <<, ==, !=, <, >, etc.
- Ternary operators: (three componenets or elements)
	

vector is a template class. Dynamically scalable.

- The ! operator only checks the badbit and the fail bit!
- If failbit is set and eofbit is not set, we have bogus data.

New Syntax I didn't know about before:
"RANGE"
EX: for( value : files ) // iterates over container objects

"AUTO"
EX: imagine vector<int> -> (auto value : file_values) // Compiler will figure out data type. Kind of just happens in higher level languages automatically.

- cat command will dump all of the content of the files within into standard output cout

EX: 12a34 will return 12 within the program and the return an error because the fail bit was set not at the end of file. & parsing
	only occurs until it hits a not integer value.

- The >> and << operator will automatically skip over white space for us. This is handy for this scenario.
EX: (read.txt)
123
456


789 (end)
this will work and save 3 different integer values to write to the write file!


